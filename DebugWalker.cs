using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

class DebugWalker : CSharpSyntaxWalker 
{
    const string INDENT_STRING = "  ";
    int indent = 0;

    public DebugWalker(SyntaxTree tree) : base(SyntaxWalkerDepth.Trivia)
    {
        Visit(tree.GetRoot());
    }

    void printline(string format, params Object?[]? args) 
    {
        Console.Write(GetIndent());
        Console.Write(format, args);
        Console.WriteLine();
    }
    private string GetIndent()
    {
        return string.Concat(Enumerable.Repeat(INDENT_STRING, indent));
    }

    public override void VisitTrivia(SyntaxTrivia trivia)
    {
        switch (trivia.Kind()) {
            case SyntaxKind.XmlComment: {
                throw new NotSupportedException("XmlComment not supported as we don't know when/if those are generated by the parser.");
            }

            case SyntaxKind.SingleLineCommentTrivia:
            case SyntaxKind.SingleLineDocumentationCommentTrivia:
            case SyntaxKind.MultiLineCommentTrivia:
            case SyntaxKind.MultiLineDocumentationCommentTrivia: {
                printline("!comment: {0}", trivia.ToFullString().ReplaceLineEndings("\n  " + GetIndent()));
                break;
            }

            case SyntaxKind.EndOfLineTrivia: {
                printline("¬");
                break;
            }
        }
    }

    public override void DefaultVisit(SyntaxNode node)
    {
        // If this is called, that means the code contains nodes that are not supported by the converter.
        printline("«{0}»", node.GetType().Name);
        indent++;
        base.DefaultVisit(node);
        indent--;
    }

}
